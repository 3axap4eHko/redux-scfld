{{=it.__warning_header}}
{{
  const typesPath         = it.relative(it.config.actionsPath, it.config.typesPath);
  const importNamespaces  = Object.keys(it.entities).map( namespace => `NAMESPACE_${namespace.toUpperCase()}`).join(',\n  ');
  const importTypes       = it.mapEntity(it.entities, entity => entity.TYPE ).join(',\n  ');
  const importActions     = it.mapEntity(it.entities, entity => `import ${entity.fullName}Action from './${it.noExt(entity.path)}';` ).join('\n');
}}

import {
  STATUS_PROCESS,
  STATUS_SUCCESS,
  STATUS_FAILURE,
  // Namespaces
  {{=importNamespaces}},
  // Types
  {{=importTypes}},
} from './{{=typesPath}}';

{{=importActions}}

function _createProcess(namespace, type, ...args) { // eslint-disable-line no-underscore-dangle
  return {
    namespace,
    type,
    status: STATUS_PROCESS,
    args,
  };
}
function _createSuccess(namespace, type, result) { // eslint-disable-line no-underscore-dangle
  return {
    namespace,
    type,
    status: STATUS_SUCCESS,
    result,
  };
}
function _createFailure(namespace, type, error, args) { // eslint-disable-line no-underscore-dangle
  return {
    namespace,
    type,
    status: STATUS_FAILURE,
    args,
    error,
  };
}

function _createAction(namespace, type, action) { // eslint-disable-line no-underscore-dangle
  return (...args) => (dispatch, getState) => {
    return dispatch(_createProcess(namespace, type, ...args))
      .then(() => action(getState, ...args))
      .then(result => dispatch(_createSuccess(namespace, type, result)))
      .catch(error => dispatch(_createFailure(namespace, type, error, args)));
  };
}


{{
for(const namespace in it.entities ) {
  for(const name in it.entities[namespace] ) {
    const entity = it.entities[namespace][name]; }}
export const {{=entity.fullName}} = _createAction(
  NAMESPACE_{{=entity.NAMESPACE}},
  {{=entity.TYPE}},
  {{=entity.fullName}}Action
);
{{
  }
}
}}
