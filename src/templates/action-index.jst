{__warning_header}
<%
  const typesPath         = relative(config.actionsPath, config.typesPath);
  const importNamespaces  = Object.keys(entities).map( namespace => `NAMESPACE_${namespace.toUpperCase()}`).join(',\n  ');
  const importTypes       = mapEntity(entities, entity => entity.TYPE ).join(',\n  ');
  const importActions     = mapEntity(entities, entity => `import ${entity.fullName}Action from './${noExt(entity.path)}';` ).join('\n');
%>
import {
  STATUS_PROCESS,
  STATUS_SUCCESS,
  STATUS_FAILURE,
  // Namespaces
  {importNamespaces},
  // Types
  {importTypes},
} from './{typesPath}';

{importActions}

function _createProcess(namespace, type, ...args) { // eslint-disable-line no-underscore-dangle
  return {
    namespace,
    type,
    status: STATUS_PROCESS,
    args,
  };
}
function _createSuccess(namespace, type, result) { // eslint-disable-line no-underscore-dangle
  return {
    namespace,
    type,
    status: STATUS_SUCCESS,
    result,
  };
}
function _createFailure(namespace, type, error, args) { // eslint-disable-line no-underscore-dangle
  return {
    namespace,
    type,
    status: STATUS_FAILURE,
    args,
    error,
  };
}

function _createAction(namespace, type, action) { // eslint-disable-line no-underscore-dangle
  return (...args) => (dispatch, getState) => {
    dispatch(_createProcess(namespace, type, ...args));
    return new Promise(resolve => resolve(action(getState, ...args)))
      .then(result => dispatch(_createSuccess(namespace, type, result)))
      .catch(error => dispatch(_createFailure(namespace, type, error, args)));
  };
}

<% eachEntity(entities, entity => { %>
export const {entity.fullName} = _createAction(
  NAMESPACE_{entity.NAMESPACE},
  {entity.TYPE},
  {entity.fullName}Action,
);
<% }) %>
