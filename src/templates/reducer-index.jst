{__warning_header}
'use strict';

import {
    NAMESPACE,
<% eachEntity(entities, entity => { %>
    {entity.TYPE},
<% } ) %>
} from './{typePath}';

<% if (statesPath) {%>import defaultState from '{statesPath}';<% } else { %>const defaultState = {};<% } %>

<% eachEntity(entities, entity => { %>
import {entity.fullName} from './{entity.path}';
<% } ) %>

const reducers = {
<% _.forEach(entities, (group, namespace) => { %>
    [NAMESPACE.{namespace}]: {
<% _.forEach(group, entity => { %>
        [{entity.TYPE}]: {entity.fullName},
<% } ) %>
    },
<% } ) %>
};

export default function(state = defaultState, action) {
    const {namespace, type} = action;
    if ( state && namespace in state && namespace in reducers ) {
        const prevNamespaceState = state[namespace];
        if ( type in reducers[namespace] ) {
            const nextNamespaceState = reducers[namespace][type](prevNamespaceState, action);
            if (typeof nextNamespaceState === 'undefined') {
                throw new Error(`State from ${<%  %>namespace}.${<%  %>type} cannot be undefined`);
            }
            if (prevNamespaceState !== nextNamespaceState) {
                return {...state, ...{[namespace]: nextNamespaceState}};
            }
        } else {
            throw new Error(`Entity ${<%  %>namespace}.${<%  %>type} not defined`);
        }
    }
    return state;
};