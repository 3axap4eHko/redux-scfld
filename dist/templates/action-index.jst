{__warning_header}
'use strict';

import {
    NAMESPACE,
    PROCESS,
    SUCCESS,
    FAILURE,
<% eachEntity(entities, entity => { %>
    {entity.TYPE},
<% }) %>
} from './{typePath}';

<% eachEntity(entities, entity => { %>
import {entity.fullName}Action from './{entity.path}';
<% } ) %>

<% eachEntity(entities, entity => { %>
function create{entity.FullName}PROCESS(...args) {
    return {
        namespace: NAMESPACE.{entity.namespace},
        type: {entity.TYPE},
        status: PROCESS,
        args
    };
}
function create{entity.FullName}Success(result) {
    return {
        namespace: NAMESPACE.{entity.namespace},
        type: {entity.TYPE},
        status: SUCCESS,
        result
    };
}
function create{entity.FullName}Failure(error) {
    return {
        namespace: NAMESPACE.{entity.namespace},
        type: {entity.TYPE},
        status: FAILURE,
        error
    };
}

export const {entity.fullName} = (...args) => {
    return (dispatch, getState) => {
        dispatch( create{entity.FullName}PROCESS(...args) );
        return Promise.resolve( {entity.fullName}Action(getState, ...args) )
            .then( result => dispatch(create{entity.FullName}Success(result)) )
            .catch( error => dispatch(create{entity.FullName}Failure(error)) );
    }
};
<% }) %>
